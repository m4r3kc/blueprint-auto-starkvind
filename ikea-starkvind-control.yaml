blueprint:
  name: Manualne sterowanie oczyszczaczem powietrza (wieloma) - dynamiczna moc
  description: |
    <br>
    <b>ðŸ“˜Ten Blueprint dynamicznie dostosowuje moc oczyszczacza powietrza w trybie manualnym w oparciu o przekroczenie poziomu PM2.5 powyÅ¼ej ustalonego progu.</b>
  domain: automation
  input:
    manual_toggle:
      name: PrzeÅ‚Ä…cznik lub encja
      description: PrzeÅ‚Ä…cznik lub encja do rÄ™cznego wÅ‚Ä…czania oczyszczacza powietrza.
      selector:
        entity:
          domain:
            - input_boolean
            - switch
            - light
            - fan
            - binary_sensor
    manual_toggle_state:
      name: Stan przeÅ‚Ä…cznika lub encji
      description: Stan, w ktÃ³rym automatyzacja jest wyzwalana (wÅ‚Ä…czony lub wyÅ‚Ä…czony)
      default: "on"
      selector:
        select:
          options:
            - "on"
            - "off"
    pm2_5_sensor:
      name: Czujnik PM2.5
      description: Czujnik PM2.5 dla oczyszczaczy powietrza
      selector:
        entity:
          domain: sensor
    ppm_threshold:
      name: PrÃ³g PM2.5
      description: PrÃ³g (PPM) do wÅ‚Ä…czania oczyszczaczy powietrza
      default: 50
      selector:
        number:
          min: 1
          max: 120
          step: 1
    fan_entities:
      name: Oczyszczacze powietrza
      description: Encje, obszary lub urzÄ…dzenia wybranych oczyszczaczy powietrza
      selector:
        target:
          entity:
            domain: fan

trigger:
  - platform: state
    entity_id: !input pm2_5_sensor
    id: automanual

condition: []

action:
  - choose:
      # Automatyczne sterowanie oparte na PM2.5
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'automanual' }}"
        sequence:
          - delay:
              minutes: 3  # Poczekaj 3 minuty, aby ustaliÄ‡ rzeczywistÄ… wartoÅ›Ä‡ PM2.5
          - condition: numeric_state
            entity_id: !input pm2_5_sensor
            above: !input ppm_threshold  # SprawdÅº, czy wartoÅ›Ä‡ PM2.5 jest powyÅ¼ej progu
          - variables:
              current_pm2_5: "{{ states(trigger.entity_id) | float }}"
              threshold: !input ppm_threshold
              fan_power: "{{ ((current_pm2_5 - threshold) / threshold * 100) | min(100) | max(10) }}"  # Oblicz moc wentylatora
          - service: fan.turn_on
            target: !input fan_entities
          - service: fan.set_percentage
            target: !input fan_entities
            data:
              percentage: "{{ fan_power }}"

mode: single
